// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/yeralin-munar/tt-go-json-fernet/cmd"
	"github.com/yeralin-munar/tt-go-json-fernet/config"
	"github.com/yeralin-munar/tt-go-json-fernet/internal/biz/usecase/datacollector"
	"github.com/yeralin-munar/tt-go-json-fernet/internal/biz/usecase/jsongenerator"
	"github.com/yeralin-munar/tt-go-json-fernet/internal/data/postgres"
	"github.com/yeralin-munar/tt-go-json-fernet/internal/encryption/fernet"
	"github.com/yeralin-munar/tt-go-json-fernet/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(logger log.Logger, server *config.Server, data *config.Data) (*cmd.App, error) {
	db, err := postgres.NewDB(data)
	if err != nil {
		return nil, err
	}
	transactionManager := postgres.NewTransactionManager(db, logger)
	fernetCipherator := fernet.NewFernetCipherator()
	scrapingKeyRepo := postgres.NewScrapingKeyRepo(db, logger)
	fileDataRepo := postgres.NewFileDataRepo(db, logger)
	dataCollectorUseCase := datacollector.NewDataCollectorUseCase(data, logger, transactionManager, fernetCipherator, scrapingKeyRepo, fileDataRepo)
	jsonGeneratorUseCase := jsongenerator.NewJsonGeneratorUseCase(data, logger, fernetCipherator, scrapingKeyRepo)
	ttGoJsonFernetService := service.NewTTGoJsonFernetService(logger, server, dataCollectorUseCase, jsonGeneratorUseCase)
	app := cmd.NewApp(logger, ttGoJsonFernetService)
	return app, nil
}
